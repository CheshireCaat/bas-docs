Структура manifest.json
-----------------------

| Данный файл - пожалуй, самый главный для любого модуля.
| Он описывает все важные глобальные настройки модуля, всю информацию,
типы действий и их названия, а так же локализацию.

Представляет из себя текстовый файл с контентом в формате **JSON**. Вот
элементарный пример:

.. code:: javascript

    {
        "name":"[0]",
        "info":
        {
            "en": "[1]", 
            "ru": "[2]"
        },
        "icon": "[3]",
        "description":"[4]",
        "description_small":
        {
            "en": "[5]", 
            "ru": "[6]"
        },
        "major_version": [7],
        "minor_version": [8],
        "developer_name": "[9]", 
        "developer_email": "[10]", 
        "developer_site": "[11]",
        "api_version": [12],
        "actions": [],
        "localize": {},
        "engine": [],
        "browser": [],
        "depends": []   
    }

Пример
------

| Я специально обозначил основные поля модуля в формате **[число]**.
| Вместо такого вида строки у каждого поля будет своё содержимое.

Пусть наш модуль будет назваться SamplePlugin. Тогда:

-  [0] : это название модуля ("SamplePlugin")
-  [1] : это описание модуля на панели экшенов en ("Simple BAS Module")
-  [2] : это описание модуля на панели экшенов ru ("Простой Модуль BAS")
-  [3] : это название файла с иконкой модуля ("sampleplugin.png")
-  [4] : это описание модуля в менеджере модулей ("Our first module")
-  [5] : это заголовок меню модуля на панели экшенов en ("Sample
   Plugin")
-  [6] : это заголовок меню модуля на панели экшенов ru ("Простой
   Плагин")

Информация о версии модуля будет отображаться в менеджере формате
[7].[8], поэтому:

-  [7] : это старшая версия модуля (1)
-  [8] : это младшая версия модуля (0)

Информация о разработчике модуля:

-  [9] : это никнейм разработчика ("Oyasumi Punpun")
-  [10] : это почта разработчика
   (`"likangt2012@gmail.com" <mailto:"likangt2012@gmail.com">`__)
-  [11] : это сайт разработчика ("cheshirecaat.github.io/BAS.Modules/")

Информация о версии Browser Automation Studio:

-  [12] : это версия BAS Api (1)

Действия (Actions)
~~~~~~~~~~~~~~~~~~

| Далее идут самые важные, и, пожалуй, самые интересные части.
| Тут стоит вспомнить первую статью о структуре модуля.
| В ней мы уже частично затрагивали значения полей, о который я расскажу
далее.

| Информация о действиях (экшенах) модуля расположена в поле
**actions**.
| Все указанные экшены будут отображаться на панели модуля в режиме
**Запись**.
| Добавим два любых действия, пусть они будут называться
*Sample\_Action1* и *Sample\_Action2*.
| После преобразования, массив **actions** будет выглядеть, например,
так:

.. code:: javascript

        "actions":
        [
            {
                "name":"[0]",
                "description":
                {
                    "en": "[1]",
                    "ru": "[2]"
                },
                "template": "[3]",
                "is_element": [4],
                "interface": "[5]",
                "select": "[6]",
                "code": 
                [
                    {
                        "file": "[7]", 
                        "name": "[8]"
                    }
                ]
            },
            {
                "name":"[0]",
                "description":
                {
                    "en": "[1]",
                    "ru": "[2]"
                },
                "template": "[3]",
                "is_element": [4],
                "interface": "[5]",
                "select": "[6]",
                "code": 
                [
                    {
                        "file": "[7]", 
                        "name": "[8]"
                    }
                ]
            }
        ],  

-  [0] : это название нашего действия ("Sample\_Action1",
   "Sample\_Action2")
-  [1] : это описание нашего действия en ("Just 1 action", "Just 2
   action")
-  [2] : это описание нашего действия ru ("Просто 1 действие", "Просто 2
   действие")
-  [3] : это шаблон нашего действия, внешний вид блока действия на
   панели конструктора
   (О нём мы еще поговорим в следующих статьях).
-  [4] : это выбор, отображать ли наше действие в контекстном меню
   браузера в режиме запись
   (Элемент поля с выбором действий, которое открывается при щелчке ЛКМ
   в окне браузера).
-  [5] : это название файла, в котором будет содержаться интерфейс
   действия ("sample\_action1\_interface.js",
   "sample\_action2\_interface.js")
-  [6] : это название файла, в котором будет содержаться логика
   взаимодействия интерфейса действия и его кода
   ("sample\_action1\_select.js", "sample\_action2\_select.js")
-  [7] : это название файла, в котором будет содержаться код действия
   ("sample\_action1\_code.js", "sample\_action2\_code.js")
-  [8] : это название файла, в котором будет содержаться код действия
   **без формата** ("sample\_action1\_code", "sample\_action2\_code")

Локализация (Localize)
~~~~~~~~~~~~~~~~~~~~~~

| Информация о локализации, переводе всех строк и текстов, которые
содержатся в модуле и в каждом конкретном действии хранится в объекте
| **localize**.
| Изменения этого блока можно будет отследить при переключении языка в
самой программе.
| Синтаксис довольно простой:

.. code:: javascript

    "localize": 
    {       
        "Example 1 string":
        {
            "ru":"Пример 1 строки"
        },
        "Example 2 string":
        {
            "ru":"Пример 2 строки"
        },
        "Example 3 string":
        {
            "ru":"Пример 3 строки"
        }
    },

Здесь имеет смысл упомянуть основную особенность - переводить можно не
просто строки, но и HTML-Элементы, в будущем мы разберем подобные
примеры. Так же, очень важно, если в строке содержится символ **"**, его
нужно экранировать косой чертой **\\**.

Движок (Engine)
~~~~~~~~~~~~~~~

Данный объект мы косвенно рассмотрели в первой статье. Чтобы упростить
использование однотипного кода или писать сложные алгоритмы, лучше
подключать отдельный файл **engine.js**. Указывается он очень просто:

.. code:: javascript

    "engine": 
    [
        "engine.js"
    ],

Название файла движка может быть любое, но лучше придерживаться
определенных правил и завести в привычку именовать файлы правильно,
чтобы избежать путаницы в будущем.

Браузер (Browser)
~~~~~~~~~~~~~~~~~

Данный объект, как и **Engine** уже был упомянут ранее. В **browser.js**
размещают логику работы с браузером. Обычно это нужно, если вы делаете
модуль, который расширяет возможности движка BAS и хотите добавить новые
возможности. Это обычный **.js** файл, который, как и **engine.js**
хранит основную логику взаимодействий вашего модуля. Подключается так же
как и прошлый объект:

.. code:: javascript

    "browser": 
    [
        "browser.js"
    ],

Зависимости (Depends)
~~~~~~~~~~~~~~~~~~~~~

| Данный объект содержит информацию о том, какие **другие** модули
должен будет использовать ваш плагин.
| Используется достаточно редко, но в будущих статьях мы обязательно
рассмотрим его реализацию и принцип работы.
| Подключается так

.. code:: javascript

    "depends": 
    [
        "FirstModuleName",
        "SecondModuleName"
    ]

Заключение
~~~~~~~~~~

| Мы рассмотрели основные составные части файла манифеста.
| Различные редкие случаи и дополнительные объекты мы рассмотрим
непосредственно при изучении конкретных примеров.
| В нескольких следующих статьях мы разберем создание с нуля своего
модуля, поэтому накопленные знания вам пригодятся
| для полного понимания происходящего.
